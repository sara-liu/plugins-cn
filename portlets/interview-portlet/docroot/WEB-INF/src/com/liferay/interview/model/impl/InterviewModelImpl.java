/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.interview.model.impl;

import com.liferay.interview.model.Interview;
import com.liferay.interview.model.InterviewModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Interview service. Represents a row in the &quot;Interview_Interview&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.interview.model.InterviewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InterviewImpl}.
 * </p>
 *
 * @author Sara Liu
 * @see InterviewImpl
 * @see com.liferay.interview.model.Interview
 * @see com.liferay.interview.model.InterviewModel
 * @generated
 */
public class InterviewModelImpl extends BaseModelImpl<Interview>
	implements InterviewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a interview model instance should use the {@link com.liferay.interview.model.Interview} interface instead.
	 */
	public static final String TABLE_NAME = "Interview_Interview";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "interviewId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "expireDate", Types.TIMESTAMP },
			{ "questionSetId", Types.BIGINT },
			{ "response", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Interview_Interview (uuid_ VARCHAR(75) null,interviewId LONG not null primary key,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,emailAddress VARCHAR(75) null,startDate DATE null,expireDate DATE null,questionSetId LONG,response VARCHAR(300) null)";
	public static final String TABLE_SQL_DROP = "drop table Interview_Interview";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.interview.model.Interview"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.interview.model.Interview"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.interview.model.Interview"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.interview.model.Interview"));

	public InterviewModelImpl() {
	}

	public long getPrimaryKey() {
		return _interviewId;
	}

	public void setPrimaryKey(long primaryKey) {
		setInterviewId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_interviewId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Interview.class;
	}

	public String getModelClassName() {
		return Interview.class.getName();
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getInterviewId() {
		return _interviewId;
	}

	public void setInterviewId(long interviewId) {
		_interviewId = interviewId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	public Date getExpireDate() {
		return _expireDate;
	}

	public void setExpireDate(Date expireDate) {
		_expireDate = expireDate;
	}

	public long getQuestionSetId() {
		return _questionSetId;
	}

	public void setQuestionSetId(long questionSetId) {
		_questionSetId = questionSetId;
	}

	public String getResponse() {
		if (_response == null) {
			return StringPool.BLANK;
		}
		else {
			return _response;
		}
	}

	public void setResponse(String response) {
		_response = response;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Interview toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Interview)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					Interview.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		InterviewImpl interviewImpl = new InterviewImpl();

		interviewImpl.setUuid(getUuid());
		interviewImpl.setInterviewId(getInterviewId());
		interviewImpl.setUserId(getUserId());
		interviewImpl.setCreateDate(getCreateDate());
		interviewImpl.setModifiedDate(getModifiedDate());
		interviewImpl.setName(getName());
		interviewImpl.setEmailAddress(getEmailAddress());
		interviewImpl.setStartDate(getStartDate());
		interviewImpl.setExpireDate(getExpireDate());
		interviewImpl.setQuestionSetId(getQuestionSetId());
		interviewImpl.setResponse(getResponse());

		interviewImpl.resetOriginalValues();

		return interviewImpl;
	}

	public int compareTo(Interview interview) {
		long primaryKey = interview.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Interview interview = null;

		try {
			interview = (Interview)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = interview.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		InterviewModelImpl interviewModelImpl = this;

		interviewModelImpl._originalUuid = interviewModelImpl._uuid;

		interviewModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Interview> toCacheModel() {
		InterviewCacheModel interviewCacheModel = new InterviewCacheModel();

		interviewCacheModel.uuid = getUuid();

		String uuid = interviewCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			interviewCacheModel.uuid = null;
		}

		interviewCacheModel.interviewId = getInterviewId();

		interviewCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			interviewCacheModel.createDate = createDate.getTime();
		}
		else {
			interviewCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			interviewCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			interviewCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		interviewCacheModel.name = getName();

		String name = interviewCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			interviewCacheModel.name = null;
		}

		interviewCacheModel.emailAddress = getEmailAddress();

		String emailAddress = interviewCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			interviewCacheModel.emailAddress = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			interviewCacheModel.startDate = startDate.getTime();
		}
		else {
			interviewCacheModel.startDate = Long.MIN_VALUE;
		}

		Date expireDate = getExpireDate();

		if (expireDate != null) {
			interviewCacheModel.expireDate = expireDate.getTime();
		}
		else {
			interviewCacheModel.expireDate = Long.MIN_VALUE;
		}

		interviewCacheModel.questionSetId = getQuestionSetId();

		interviewCacheModel.response = getResponse();

		String response = interviewCacheModel.response;

		if ((response != null) && (response.length() == 0)) {
			interviewCacheModel.response = null;
		}

		return interviewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", interviewId=");
		sb.append(getInterviewId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", expireDate=");
		sb.append(getExpireDate());
		sb.append(", questionSetId=");
		sb.append(getQuestionSetId());
		sb.append(", response=");
		sb.append(getResponse());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.interview.model.Interview");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>interviewId</column-name><column-value><![CDATA[");
		sb.append(getInterviewId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expireDate</column-name><column-value><![CDATA[");
		sb.append(getExpireDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionSetId</column-name><column-value><![CDATA[");
		sb.append(getQuestionSetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>response</column-name><column-value><![CDATA[");
		sb.append(getResponse());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Interview.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Interview.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _interviewId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _emailAddress;
	private Date _startDate;
	private Date _expireDate;
	private long _questionSetId;
	private String _response;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private Interview _escapedModelProxy;
}